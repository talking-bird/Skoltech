{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.9"},"colab":{"name":"Assignment 1","provenance":[{"file_id":"1_Yw8KmHcOSyf4tE_ipmzD2_yBXIUPAry","timestamp":1648550927230}],"collapsed_sections":[]},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"collapsed":true,"id":"gFe273vKFgF-"},"source":["# Assignment 1 (60 points total)\n","\n","You will train a convolutional neural network (aka ConvNet or CNN) to solve yet another image classification problem: the Tiny ImageNet dataset (200 classes, 100K training images, 10K validation images). Try to achieve as high accuracy as possible.\n","\n","This exercise is close to what people do in real life. No toy architectures this time."]},{"cell_type":"markdown","metadata":{"id":"-S-WyYK8FgGF"},"source":["## Grading\n","\n","* 11 points for the report.\n","* 5 points for using an **interactive** (don't reinvent the wheel with `plt.plot`) tool for viewing progress, for example TensorBoard.\n","* 9 points for a network that gets $\\geq$25% accuracy on the private **test** set.\n","* Up to 35 points for accuracy up to 50%, issued linearly (i.e. 0 points for 25%, 7 points for 30%, 21 points for 40%, 35 points for $\\geq$50%.\n","\n","## Grading Explained\n","\n","* *Private test set*: it's a part of the dataset like the validation set, but for which the ground truth labels are known only to us (you won't be able to evaluate your model on it). When grading, we will compute test accuracy by running your code that computes val accuracy, but having replaced the images in `'val/'` with the test set.\n","* *How to submit*:\n","  * **<font color=\"red\">Read this in advance, don't leave until the last minute.</font> Wrong checkpoint submission = <font color=\"red\">0 points for accuracy</font>. Be careful!**\n","  * After you've trained your network, [save weights](https://pytorch.org/tutorials/recipes/recipes/saving_and_loading_a_general_checkpoint.html) to \"*checkpoint.pth*\" with `model.state_dict()` and `torch.save()`.\n","  * Set `DO_TRAIN = False`, click \"Restart and Run All\" and make sure that your validation accuracy is computed correctly.\n","  * Compute the MD5 checksum for \"*checkpoint.pth*\" (e.g. run `!md5sum checkpoint.pth`) and paste it into \"*solution.py*\" (`get_checkpoint_metadata()`). You'll be penalized if this checksum doesn't match your submitted file.\n","  * Upload \"*checkpoint.pth*\" to Google Drive, copy the view-only link to it and paste it into \"*solution.py*\" as well.\n","  * Make sure \"Restart and Run All\" also works with `DO_TRAIN = True`: trains your model and computes validation accuracy.\n","  * <font color=\"red\">Important</font>: At least several hours before the deadline, **upload \"*solution.py*\" [here](http://350e-83-69-192-100.ngrok.io/) and make sure you get a \"ðŸ‘Œ\"**.\n","\n","* *Report*: PDF, free form; should mention:\n","  * Your history of tweaks and improvements. How you started, what you searched. (*I have analyzed these and those conference papers/sources/blog posts. I tried this and that to adapt them to my problem. ...*)\n","  * Which network architectures have you tried? Which of them didn't work, and can you guess why? What is the final one and why?\n","  * Same for the training method (batch size, optimization algorithm, number of iterations, ...): which and why?\n","  * Same for anti-overfitting (regularization) techniques. Which ones have you tried? What were their effects, and can you guess why?\n","  * **Most importantly**: deep learning insights you gained. Can you give several examples of how *exactly* experience from this exercise will affect you training your future neural nets? (tricks, heuristics, conclusions, observations)\n","  * **List all sources of code**.\n","* *Progress viewing tool*: support the report with screenshots of accuracy and loss plots (training and validation) over time.\n","\n","## Restrictions\n","\n","* No pretrained networks.\n","* Don't enlarge images (e.g. don't resize them to $224 \\times 224$ or $256 \\times 256$).\n","\n","## Tips\n","\n","* **One change at a time**: don't test several new things at once (unless you are super confident that they will work). Train a model, introduce one change, train again.\n","* Google a lot: try to reinvent as few wheels as possible. Harvest inspiration from PyTorch recipes, from GitHub, from blogs...\n","* Use GPU.\n","* Regularization is very important: L2, batch normalization, dropout, data augmentation...\n","* Pay much attention to accuracy and loss graphs (e.g. in TensorBoard). Track failures early, stop bad experiments early.\n","* 2-3 hours of training (in Colab) should be enough for most models, maybe 4-6 hours if you're experimenting.\n","* Save checkpoints every so often in case things go wrong (optimization diverges, Colab disconnects...).\n","* Don't use too large batches, they can be slow and memory-hungry. This is true for inference too.\n","* Also don't forget to use `torch.no_grad()` and `.eval()` during inference."]},{"cell_type":"code","source":["# Determine the locations of auxiliary libraries and datasets.\n","# `AUX_DATA_ROOT` is where 'tiny-imagenet-2022.zip' is.\n","\n","# Detect if we are in Google Colaboratory\n","try:\n","    import google.colab\n","    IN_COLAB = True\n","except ImportError:\n","    IN_COLAB = False\n","\n","from pathlib import Path\n","if IN_COLAB:\n","    google.colab.drive.mount(\"/content/drive\")\n","    \n","    # Change this if you created the shortcut in a different location\n","    AUX_DATA_ROOT = Path(\"/content/drive/My Drive/Deep Learning 2022 -- Home Assignment 1\")\n","    \n","    assert AUX_DATA_ROOT.is_dir(), \"Have you forgot to 'Add a shortcut to Drive'?\"\n","    \n","    import sys\n","    sys.path.append(str(AUX_DATA_ROOT))\n","else:\n","    AUX_DATA_ROOT = Path(\".\")"],"metadata":{"id":"tFM8olIJBrnF"},"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"TcFGHHXVsM-J"},"source":["# Imports\n","\n","# Your solution\n","%load_ext autoreload\n","%autoreload 1\n","\n","%aimport solution"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"X5eKWQv9wi3P"},"source":["# If `True`, will train the model from scratch and validate it.\n","# If `False`, instead of training will load weights from './checkpoint.pth'.\n","# When grading, we will test both cases.\n","DO_TRAIN = True"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"njk50aDoFgGT"},"source":["# Put training and validation images in `./tiny-imagenet-200/train` and `./tiny-imagenet-200/val`:\n","if not Path(\"tiny-imagenet-200/train/class_000/00000.jpg\").is_file():\n","    import zipfile\n","    with zipfile.ZipFile(AUX_DATA_ROOT / 'tiny-imagenet-2022.zip', 'r') as archive:\n","        archive.extractall()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"AFqnb1-EFgGj"},"source":["# Initialize dataloaders\n","train_dataloader = solution.get_dataloader(\"./tiny-imagenet-200/\", 'train')\n","val_dataloader   = solution.get_dataloader(\"./tiny-imagenet-200/\", 'val')\n","\n","# Initialize the raw model\n","model = solution.get_model()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"J9n7DyGcFgGq"},"source":["if DO_TRAIN:\n","    # Train from scratch\n","    optimizer = solution.get_optimizer(model)\n","    solution.train_on_tinyimagenet(train_dataloader, val_dataloader, model, optimizer)\n","else:\n","    # Download the checkpoint and initialize model weights from it\n","    import urllib\n","    import subprocess\n","\n","    penalize = False\n","\n","    # Get your link and checksum\n","    claimed_md5_checksum, google_drive_link = solution.get_checkpoint_metadata()\n","\n","    # Use your link to download \"checkpoint.pth\"\n","    !pip install -U gdown\n","    !gdown --id {urllib.parse.urlparse(google_drive_link).path.split('/')[-2]} -O checkpoint.pth\n","\n","    try:\n","        # Compute the actual checksum\n","        real_md5_checksum = subprocess.check_output(\n","            [\"md5sum\", \"checkpoint.pth\"]).decode().split()[0]\n","    except subprocess.CalledProcessError as err:\n","        # Couldn't download or the filename isn't \"checkpoint.pth\"\n","        print(f\"Wrong link or filename: {err}\")\n","        penalize = True\n","    else:\n","        # The trained checkpoint is different from the one submitted\n","        if real_md5_checksum != claimed_md5_checksum:\n","            print(\"Checksums differ! Late submission?\")\n","            penalize = True\n","\n","    if penalize:\n","        print(\"ðŸ”« Prepare the penalizer! ðŸ”«\")\n","\n","    # Finally load weights\n","    solution.load_weights(model, \"./checkpoint.pth\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"CDJw8MokFxP9"},"source":["# Classify some validation samples\n","import torch\n","\n","example_batch, example_batch_labels = next(iter(val_dataloader))\n","model.eval()\n","with torch.no_grad():\n","  _, example_predicted_labels = solution.predict(model, example_batch).max(1)\n","\n","print(\"Predicted class / Ground truth class\")\n","for predicted, gt in list(zip(example_predicted_labels, example_batch_labels))[:15]:\n","    print(\"{:03d} / {:03d}\".format(predicted, gt))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"U_Qddecy7-uS"},"source":["# Print validation accuracy\n","val_accuracy, _ = solution.validate(val_dataloader, model)\n","val_accuracy *= 100\n","assert 1.5 <= val_accuracy <= 100.0\n","print(\"Validation accuracy: %.2f%%\" % val_accuracy)"],"execution_count":null,"outputs":[]}]}